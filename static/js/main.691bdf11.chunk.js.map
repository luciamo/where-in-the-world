{"version":3,"sources":["components/CountryList/index.js","services/index.js","constants.js","pages/Home/index.js","pages/Country/index.js","App.js","serviceWorker.js","index.js"],"names":["CountriesList","countries","className","map","name","population","region","capital","alpha3Code","flag","key","to","style","backgroundImage","getCountriesList","axios","get","getCountry","getCountryBorderList","borders","a","async","countriesAtBorder","border","countriesList","Promise","all","data","getCountriesByRegion","regions","Home","useState","setCountries","searchingCountry","setSearchingCountry","filteredCountries","setFilteredCountries","setRegion","useEffect","fetchCountrys","type","placeholder","value","onChange","e","target","filter","country","toLowerCase","includes","searchCountry","filterByRegion","regionFromList","Country","match","setCountry","borderCountrys","setBorderCountries","params","countryRes","fetchCountry","nativeName","subregion","topLevelDomain","currencies","languages","src","alt","domain","join","curencie","language","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.691bdf11.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.scss';\n\nconst CountriesList = ({ countries }) => (\n  <ul className=\"countries_list\">{countries.map(({\n    name, population, region, capital, alpha3Code, flag,\n  }) => (\n    <li className=\"countries_list__item\" key={alpha3Code}>\n      <Link to={`/country/${alpha3Code}`}>\n        <div className=\"countries_list__flag\" style={{ backgroundImage: `url(${flag})` }} />\n        {/* <img src={flag} alt={`${name} Flag`} className=\"countries_list__flag\" /> */}\n        <p><b>{name}</b></p>\n        <p><b>Population:</b> {population}</p>\n        <p><b>Region:</b> {region}</p>\n        <p><b>Capital:</b> {capital}</p>\n      </Link>\n    </li>\n  ))}\n  </ul>\n);\n\nexport default CountriesList;\n","import axios from 'axios';\n\nexport const getCountriesList = () => axios.get('https://restcountries.eu/rest/v2/all');\n\nexport const getCountry = (alpha3Code) => axios.get(`https://restcountries.eu/rest/v2/alpha/${alpha3Code}`);\n\nexport const getCountryBorderList = async (borders) => {\n  const countriesAtBorder = borders.map((border) => getCountry(border));\n\n  const countriesList = Promise.all(countriesAtBorder);\n\n  return (await countriesList).map(({ data: { name, alpha3Code } }) => ({\n    name,\n    alpha3Code,\n  }));\n};\n\nexport const getCountriesByRegion = (region) => axios.get(`https://restcountries.eu/rest/v2/region/${region}`);\n","export const regions = ['all', 'africa', 'americas', 'asia', 'europe', 'oceania'];\nexport const ALL = 'all';\n","import React, { useState, useEffect } from 'react';\nimport CountriesList from '../../components/CountryList';\nimport { getCountriesList, getCountriesByRegion } from '../../services';\nimport { regions, ALL } from '../../constants';\nimport './styles.scss';\n\nconst Home = () => {\n  const [countries, setCountries] = useState([]);\n  const [searchingCountry, setSearchingCountry] = useState('');\n  const [filteredCountries, setFilteredCountries] = useState([]);\n  const [region, setRegion] = useState('');\n\n  const searchCountry = ({ target: { value } }) => {\n    setSearchingCountry(value);\n    if (!value) {\n      return setFilteredCountries([]);\n    }\n    setFilteredCountries(\n      countries.filter((country) => country.name.toLowerCase().includes(value)),\n    );\n  };\n\n  const filterByRegion = async (region) => {\n    setRegion(region);\n    const { data } = region === ALL ? await getCountriesList() : await getCountriesByRegion(region);\n    setCountries(data);\n  };\n\n  useEffect(() => {\n    const fetchCountrys = async () => {\n      const { data } = await getCountriesList();\n      setCountries(data);\n    };\n    fetchCountrys();\n  }, []);\n\n  return (\n    <div className=\"Home\">\n      <div className=\"Home__fields\">\n        <input\n          className=\"Home__field Home__field--text\"\n          type=\"text\"\n          placeholder=\"Search for a country\"\n          value={searchingCountry}\n          onChange={(e) => searchCountry(e)}\n        />\n        <select className=\"Home__field Home__field--select\" value={region} onChange={(e) => filterByRegion(e.target.value)}>\n          {\n          regions.map((regionFromList) => (\n            <option key={regionFromList} value={regionFromList}>{regionFromList}</option>\n          ))\n        }\n        </select>\n      </div>\n      <CountriesList\n        countries={searchingCountry ? filteredCountries : countries}\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport './style.scss';\nimport { Link } from 'react-router-dom';\nimport { getCountry, getCountryBorderList } from '../../services';\n\nconst Country = ({ match }) => {\n  const [country, setCountry] = useState({});\n  const [borderCountrys, setBorderCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchCountry = async () => {\n      const countryRes = await getCountry(match.params.alpha3Code);\n      const countriesAtBorder = await getCountryBorderList(\n        countryRes.data.borders,\n      );\n\n      setBorderCountries(countriesAtBorder);\n      setCountry(countryRes.data);\n    };\n\n    fetchCountry();\n  }, [match.params.alpha3Code]);\n\n  const {\n    name,\n    nativeName,\n    population,\n    region,\n    subregion,\n    capital,\n    topLevelDomain,\n    currencies,\n    languages,\n    flag,\n  } = country;\n\n  return (\n    <div className=\"country_wrapper\">\n      <Link to=\"/\">\n        <button type=\"button\" className=\"back_button\">BACK</button>\n      </Link>\n      <div className=\"country\">\n        <img className=\"country__flag\" src={flag} alt={`${name} flag`} />\n        <span>\n          <h1>{name}</h1>\n          <p>Native Name: {nativeName}</p>\n          <p>Population: {population}</p>\n          <p>Region: {region}</p>\n          <p>Sub Region: {subregion}</p>\n          <p>Capital: {capital}</p>\n        </span>\n        <span>\n          <p>\n            Top Level Domain: {topLevelDomain ? topLevelDomain.map((domain) => domain).join(', ') : ''}\n          </p>\n          <p>\n            Currencies: {currencies ? currencies.map((curencie) => curencie.name).join(', ') : ''}\n          </p>\n          <p>\n            Languages: {languages ? languages.map((language) => language.name).join(', ') : ''}\n          </p>\n        </span>\n      </div>\n      <span className=\"borders\">\n        <span>Border Countries:</span>\n        {borderCountrys.map(({ name, alpha3Code }) => (\n          <Link key={alpha3Code} to={`/country/${alpha3Code}`} className=\"borders__link\">\n            {name}\n          </Link>\n        ))}\n      </span>\n    </div>\n  );\n};\n\nexport default Country;\n","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Country from './pages/Country';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/country/:alpha3Code\" component={Country} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}